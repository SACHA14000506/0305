(set-logic QF_S)
(declare-fun sigmaStar_0 () String)
(declare-fun literal_1 () String)
(declare-fun x_2 () String)
(declare-fun literal_3 () String)
(declare-fun x_4 () String)
(assert (= literal_1 "\x3c\x66\x6f\x72\x6d\x20\x61\x63\x74\x69\x6f\x6e\x3d\x5c\x22\x63\x6f\x75\x72\x73\x65\x66\x69\x6c\x65\x73\x2e\x70\x68\x70\x5c\x22\x20\x6d\x65\x74\x68\x6f\x64\x3d\x5c\x22\x70\x6f\x73\x74\x5c\x22\x20\x6e\x61\x6d\x65\x3d\x5c\x22\x66\x6f\x72\x6d\x5c\x22\x20"))
(assert (= x_2 (str.++ literal_1 sigmaStar_0)))
(assert (= literal_3 "\x3e\x5c\x6e"))
(assert (= x_4 (str.++ x_2 literal_3)))
(assert (str.in-re x_4 (re.++ (re.* re.allchar) (re.++ (str.to-re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(assert (= (str.len x_4) (+ (str.len literal_1) (str.len sigmaStar_0) (str.len literal_3))))
(assert (str.contains x_4 literal_1))
(assert (str.contains x_4 literal_3))
(assert (str.prefixof literal_1 x_2))
(assert (str.suffixof literal_3 x_4))
(assert (>= (str.indexof x_4 literal_1 0) 0))
(assert (>= (str.indexof x_4 literal_3 0) 0))
(assert (= (str.at x_4 0) (str.at literal_1 0)))
(assert (= (str.substr x_4 0 (str.len literal_1)) literal_1))
(assert (= (str.replace x_4 literal_1 "\x5c\x3c\x70\x5c\x22") (str.++ "\x5c\x3c\x70\x5c\x22" (str.substr x_4 (str.len literal_1) (str.len x_4)))))
(assert (= (str.to.int "\x31\x32\x33") 123))
(assert (= (int.to.str 456) "\x34\x35\x36"))
(check-sat)
(exit)