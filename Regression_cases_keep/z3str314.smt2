(set-logic QF_S)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun literal_3 () String)
(declare-fun x_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_7 () String)
(declare-fun x_8 () String)
(declare-fun literal_6 () String)
(declare-fun x_9 () String)
(declare-fun literal_10 () String)
(declare-fun x_11 () String)
(declare-fun x_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_14 () String)
(assert (= literal_3 "\x5c\x6e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x0d\x0a\x20\x20\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x68\x69\x64\x64\x65\x6e\x27\x20\x6e\x61\x6d\x65\x3d\x27\x70\x61\x67\x65\x32\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_4 (str.++ literal_3 sigmaStar_0)))
(assert (= literal_5 "\x3e\x0d\x0a\x20\x20\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x68\x69\x64\x64\x65\x6e\x27\x20\x6e\x61\x6d\x65\x3d\x27\x6f\x6e\x70\x61\x67\x65\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_7 (str.replace x_4 literal_5 "\x5c\x6e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x0d\x0a\x20\x20\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x68\x69\x64\x64\x65\x6e\x27\x20\x6e\x61\x6d\x65\x3d\x27\x70\x61\x67\x65\x32\x27\x20\x76\x61\x6c\x75\x65\x3d\x27")))
(assert (= literal_6 "\x31"))
(assert (or (= x_8 sigmaStar_2) (= x_8 literal_6)))
(assert (= x_9 (str.++ x_7 x_8)))
(assert (= x_11 (str.++ x_9 literal_10)))
(assert (= x_12 (str.++ x_11 sigmaStar_1)))
(assert (= x_14 (str.++ x_12 literal_13)))
(assert (str.contains x_14 "\x5c\x3c\x53\x43\x52\x49\x50\x54"))
(assert (str.prefixof literal_3 x_14))
(assert (str.suffixof literal_13 x_14))
(assert (> (str.indexof x_14 literal_10 0) 0))
(assert (= (str.replace x_14 literal_5 "\x20") x_14))
(assert (str.in-re x_14 (re.++ (re.* re.allchar) (re.++ (str.to-re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(assert (= (str.len x_14) (str.len (str.++ literal_3 literal_5 literal_6 literal_10 literal_13 sigmaStar_0 sigmaStar_1 sigmaStar_2))))
(assert (= (str.at x_14 0) (str.at literal_3 0)))
(assert (= (str.to.int x_14) (str.to.int (str.++ literal_3 literal_5 literal_6 literal_10 literal_13 sigmaStar_0 sigmaStar_1 sigmaStar_2))))
(check-sat)
(exit)