import os
import src.settings as settings
from src.instance import Instance
import re
import random
import mutate_ml
import gen_ml

class Generator_Str:
    num = 0

    def __init__(self):
        self.ops = settings.string_ops # 加载字符串操作符
        # 一个正则表达式的列表，用于匹配一些特定的 SMT 文件头部信息
        self.re_set = [re.compile('\(set-info.*'), re.compile('Generated by:.*'), re.compile('Generated on:.*'),
                       re.compile('Generator:.*'), re.compile('Application:.*'), re.compile('Target solver:.*'),
                       re.compile('\|\)'), re.compile('Publication:\n.*\n.*')]
        self.reg = re.compile('str\.[a-z]*_[a-z]*')

    def gen(self):

        folder_path = "/home/cass/Webstorm_project/0226/init_item"

        # 获取文件夹中所有.smt2文件
        smt2_files = [file for file in os.listdir(folder_path) if file.endswith(".smt2")]

        # 检查是否有.smt2文件
        if not smt2_files:
            print("没有找到.smt2文件！")
        else:
            # 随机选择一个.smt2文件
            selected_file = random.choice(smt2_files)
            file_path = os.path.join(folder_path, selected_file)

            # 打开并读取文件内容
            with open(file_path, "r", encoding="utf-8") as file:
                smt = file.read()


        # smt = gen_ml.generate_mutated_smt2_v2()
        assert smt.count('assert') > 0, smt
        return Instance(smt)


    def form(self, smt):
        op = re.findall(self.reg, smt)
        op = list(set(op))
        nop = [R.replace('_', '.') for R in op]
        for i in range(len(nop)):
            smt = smt.replace(op[i], nop[i])
        return smt

    def mutate(self, to_mutate):
        input = to_mutate.primaries
        while True:
            smt = mutate_ml.generate_mutated_smt2_v2(input)
            assert smt != 'err' and smt != 'timeout' and smt != 'empty', smt  # 确保生成的内容不是错误或超时
            if smt.count('assert') > 0:  # 检查是否包含至少一个 'assert'
                break  # 如果包含 'assert'，退出循环
            # 如果没有 'assert'，循环会继续，重新变异
        return Instance(smt)
    


def mk_gen():
    return Generator_Str()
